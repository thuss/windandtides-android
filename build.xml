<?xml version="1.0" encoding="UTF-8"?>
<project name="StarterActivity" default="test">

<!-- The local.properties file is created and updated by the 'android'
     tool.
     It contains the path to the SDK. It should *NOT* be checked into
     Version Control Systems. -->
    <property file="local.properties" />

	 <!--http://lamp.epfl.ch/~michelou/android/ant-android-sdk.html -->
	<property name="build.sysclasspath" value="ignore" />

    <!-- The build.properties file can be created by you and is never touched
         by the 'android' tool. This is the place to change some of the
         default property values used by the Ant rules.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="build.properties" />

    <!-- The default.properties file is created and updated by the 'android'
         tool, as well as ADT.
         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <property file="default.properties" />

    <!-- Required pre-setup import -->
    <!-- Note that Robolectric Sample has a much more complex version of this for some reason.
         See "Custom Android task" at https://github.com/pivotal/RobolectricSample/blob/master/build.xml -->
    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />

    <!-- extension targets. Uncomment the ones where you want to do custom work in between standard targets -->
    <!--
    <target name="-pre-build">
    </target>

        [This is typically used for code obfuscation.
         Compiled code location: ${out.classes.absolute.dir}
         If this is not done in place, override ${out.dex.input.absolute.dir}]
        <target name="-post-compile">
        </target>
    -->

    <!-- Execute the Android Setup task that will setup some properties
         specific to the target, and import the build rules files.

         The rules file is imported from
            <SDK>/platforms/<target_platform>/ant/ant_rules_r#.xml

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <setup> task.
             - customize it to your needs.
         - Customize the whole script.
             - copy/paste the content of the rules files (minus the top node)
               into this file, *after* the <setup> task
             - disable the import of the rules by changing the setup task
               below to <setup import="false" />.
             - customize to your needs.
    -->
    <setup />

    <!-- Copied from ~/android-sdk-mac_x86/tools/ant/main_rules.xml -->
    <target name="clean" description="Removes output files created by other targets.">
        <!-- copied since you can't override and reference the original... -->
        <delete dir="${out.absolute.dir}" verbose="${verbose}"/>
        <delete dir="${gen.absolute.dir}" verbose="${verbose}"/>

        <!-- deleting output dirs we added -->
        <delete dir="out" verbose="${verbose}"/>
        <delete file="tmp/cached-robolectric-classes.jar" verbose="${verbose}"/>
    </target>

    <target name="-pre-compile">
        <!-- android uses this property for its generated testing framework. We'll set it manually.-->
        <property name="tested.project.absolute.dir" location="." />
        <property name="tested.project.test.absolute.dir" location="${tested.project.absolute.dir}/test/java" />
        <property name="out.test.classes.absolute.dir" location="${out.dir}/testClasses" />
    </target>

    <!-- Mostly a copy of the compile target from ~/android-sdk-mac_x86/tools/ant/main_rules.xml -->
    <target name="compile.tests" depends="compile">
        <mkdir dir="${out.test.classes.absolute.dir}"/>
        <!-- directories customized for our test dirs -->
        <!-- NOTE: setting includeantruntime="false" as advised at http://ant.apache.org/manual/Tasks/javac.html-->
        <javac encoding="${java.encoding}"
               source="${java.source}"
               target="${java.target}"
               debug="true"
               extdirs=""
               destdir="${out.test.classes.absolute.dir}"
               bootclasspathref="android.target.classpath"
               verbose="${verbose}"
               classpath="${extensible.classpath}"
               includeantruntime="false">
            <src path="${source.absolute.dir}" />
            <src path="${gen.absolute.dir}" />

            <!-- test src -->
            <src path="${tested.project.test.absolute.dir}"/>
            <classpath>
                <pathelement path="${out.classes.absolute.dir}"/>
                <pathelement path="submodules/robolectric/bin/mainClasses"/>
                <fileset dir="${extensible.libs.classpath}" includes="*.jar"/>
                <fileset dir="${extensible.libs.classpath}/test" includes="**/*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="rstest" depends="compile.tests" description="test all">
        <mkdir dir="${basedir}/out/reports/tests"/>
        <junit showoutput="true" failureproperty="junit.failure">
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest todir="${basedir}/out/reports/tests">
                <fileset dir="${test.absolute.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <classpath>
                <pathelement path="${out.classes.absolute.dir}"/>
                <pathelement path="${out.test-classes.absolute.dir}"/>
                <fileset dir="${test.external.libs.absolute.dir}" includes="*.jar"/>
                <fileset dir="${robolectric.sample.external.libs.dir}" includes="*.jar"/>

                <path refid="android.target.classpath"/>
            </classpath>
        </junit>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
    </target>

    <!-- Modified version of https://github.com/pivotal/RobolectricSample/blob/master/build.xml -->
    <target name="test" depends="compile.tests" description="test all">
        <mkdir dir="${out.dir}/out/reports/tests"/>
        <junit showoutput="true" failureproperty="junit.failure">
            <formatter type="plain" usefile="false" if="junit.console.out"/>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <batchtest todir="${out.dir}/out/reports/tests">
                <fileset dir="${tested.project.test.absolute.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <classpath>
                <!-- Project -->
                <pathelement path="${out.classes.absolute.dir}"/>
                <pathelement path="${out.test.classes.absolute.dir}"/>
                <fileset dir="${extensible.libs.classpath}" includes="**/*.jar"/>

                <!-- Robolectric -->
                <fileset dir="submodules/robolectric/lib/main" includes="*.jar"/>
                <pathelement path="submodules/robolectric/bin/mainClasses"/>

                <!-- Android -->
                <path refid="android.target.classpath"/>
            </classpath>
        </junit>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports!"/>
    </target>

</project>
